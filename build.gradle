buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath project.forgegradle
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'com.matthewprenger.cursegradle' version '1.0.8'
    id 'com.palantir.git-version' version '0.7.1'
    id 'co.riiid.gradle' version '0.4.2'
}

apply plugin: project.forgegradle_plugin

repositories {
    maven {
        name = 'CurseForge'
        url = 'https://minecraft.curseforge.com/api/maven/'
    }
}

project.metaClass.isProperty = { propName ->
    return delegate.hasProperty(propName)&&!delegate.property(propName).isEmpty()
}

sourceCompatibility='1.6'
targetCompatibility='1.6'

jar {
    classifier = project.hasProperty('extra_classifier') ? project.extra_classifier : 'universal'
}

// check libs directory and generate build number if version_qualifier supplied
group = project.group
def modver = "${project.version_major}.${project.version_minor}.${project.version_patch}"
if (project.isProperty('version_qualifier')) {
    // auto increase type : hasmicro=meta build number, nomicro=micro number
    def micro = project.isProperty('version_micro')
    def nbuild = micro?1:0
    while (true) {
        if (micro) {
            ext.build = String.format('%03d', nbuild)
            ext.modversion = "${modver}-${project.version_qualifier}.${project.version_micro}+${build}"
        } else {
            ext.build = nbuild
            ext.modversion = "${modver}-${project.version_qualifier}"
            if (nbuild>0)
                ext.modversion = "${modversion}.${build}"
        }
        version = "${project.version_minecraft}-${modversion}"
        if (!jar.outputs.files.any { file -> file.exists() })
            break
        nbuild++
    }
} else {
    ext.modversion = modver
    version = "${project.version_minecraft}-${modversion}"
}
logger.lifecycle('Output File: ' + jar.outputs.files.getAsPath())

[compileJava, compileApiJava, compileTestJava]*.options*.encoding = 'UTF-8'

idea {
    module {
        downloadSources = true
        inheritOutputDirs = true
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

minecraft {
    version = "${project.version_minecraft}-${project.version_forge}"

    if (project.isProperty('version_mappings'))
        mappings = project.version_mappings

    if (!project.isProperty('run_location'))
        runDir = 'run'
    else
        runDir = run_location.replace('{modid}', project.modid).replace('{mcversion}', project.version_minecraft)

    replaceIn 'Reference.java'
    replace '${modid}', project.modid
    replace '${modname}', project.modname
    replace '${version}', modversion
    replace '${mcversion}', project.version_minecraft
    replace '${forgeversion}', project.version_forge
}

sourceSets {
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand([
                'modid'          : project.modid,
                'modname'        : project.modname,
                'version'        : modversion,
                'mcversion'      : project.version_minecraft,
                'forgeversion'   : project.version_forge,
                'minforgeversion': project.isProperty('version_minforge') ? project.version_minforge : project.version_forge,
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

dependencies {
    shade ('org.apache.httpcomponents:httpmime:4.3.3') { transitive=false }
    shade fileTree(dir: 'libs/shade', include: '*.jar')
}

def commonManifest = {
    if (project.isProperty('extra_fmlcore'))
        attributes 'FMLCorePlugin': project.extra_fmlcore
    if (project.isProperty('extra_fmlmod'))
        attributes 'FMLCorePluginContainsFMLMod': project.extra_fmlcore
    if (project.isProperty('extra_fmlat'))
        attributes 'FMLAT': project.extra_fmlat
}

jar {
    from sourceSets.api.output
    manifest commonManifest
}

// println(shadowJar.getSource().getFiles())
shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.output
    from sourceSets.api.output
    relocate 'org.apache.http.entity.mime', 'net.teamfruit.lib.apache.http.entity.mime'
    classifier = jar.classifier
    manifest commonManifest
}

if (tasks.findByPath('reobfShadowJar')!=null) {
    reobf {
        shadowJar { mappingType = 'SEARGE' }
    }
    reobfShadowJar {
        mustRunAfter 'shadowJar'
    }
} else {
    reobf {
        dependsOn 'shadowJar'
    }
}

if (tasks.findByPath('sourceJar')==null) {
    task sourceJar(dependsOn: 'classes', type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
        manifest commonManifest
    }
}

sourceJar {
    from sourceSets.api.allSource
}

task devJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier = 'dev'
    manifest commonManifest
}

task apiJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.api.output
    classifier = 'api'
    manifest commonManifest
}

artifacts {
	archives shadowJar
    archives devJar
    archives sourceJar
    archives apiJar
}

if (!project.isProperty('keystore_location'))
    ext.keystore_location = '.'

if (!project.isProperty('keystore_alias'))
    ext.keystore_alias = ''

if (!project.isProperty('keystore_password'))
    ext.keystore_password = ''

task signJars(dependsOn: 'build') {
    inputs.dir jar.destinationDir
    inputs.file keystore_location
    inputs.property 'keystore_alias', keystore_alias
    inputs.property 'keystore_password', keystore_password
    outputs.dir jar.destinationDir

    onlyIf {
        return keystore_location != '.'
    }

    doLast {
        [jar, devJar, sourceJar, apiJar].each { eachtask ->
            eachtask.outputs.files.each { file ->
                if (!file.getPath().endsWith('.jar'))
                    return;

                logger.lifecycle "signing ${file}"
                ant.signjar(
                        destDir: file.getParentFile(),
                        jar: file,
                        keystore: keystore_location,
                        alias: keystore_alias,
                        storepass: keystore_password
                )
            }
        }
    }
}

def textChangelog = project.isProperty('extra_changelog') ? project.extra_changelog : ''
if (project.isProperty('extra_changelog_location')) {
    def fileChangelog = file('changelog.md')
    textChangelog = fileChangelog.exists()?fileChangelog.getText('UTF-8'):''
}
def pre = project.isProperty('version_qualifier')

println(project.isProperty('extra_curseforge_id'))

if (project.isProperty('api_key_curseforge') && project.isProperty('extra_curseforge_id')) {
    curseforge {
        tasks.curseforge.mustRunAfter 'signJars'
        apiKey = project.api_key_curseforge
        project {
            id = project.extra_curseforge_id

            changelogType = 'markdown'
            changelog = textChangelog

            def releasetype = 'alpha'
            if (pre) {
                if (project.version_qualifier=='beta')
                    releasetype = 'beta'
            } else
                releasetype = 'release'
            releaseType = releasetype

            mainArtifact(jar) {
                displayName = "${jar.baseName}-${jar.version}"
            }
            addArtifact(devJar) {
                displayName = "${devJar.baseName}-${devJar.version}-${devJar.classifier}"
            }
            addArtifact(sourceJar) {
                displayName = "${sourceJar.baseName}-${sourceJar.version}-${sourceJar.classifier}"
            }
            addArtifact(apiJar) {
                displayName = "${apiJar.baseName}-${apiJar.version}-${apiJar.classifier}"
            }

            relations {
            }
        }
    }
} else
    tasks.curseforge.enabled = false

if (project.isProperty('api_key_github') && project.isProperty('extra_github_owner') && project.isProperty('extra_github_repo')) {
    github {
        tasks.githubRelease.dependsOn 'build'
        prerelease = pre
        owner = project.extra_github_owner
        repo = project.extra_github_repo
        token = project.api_key_github
        tagName = jar.version
        targetCommitish = plugins.findPlugin('com.palantir.git-version').gitRepo(project).getRepository().getRef('HEAD').getObjectId().name()
        def title = (project.isProperty('extra_github_title')) ? project.release_title : jar.version
        name = title.replace('{version}', jar.version)
        body = textChangelog
        draft = false
        assets = [
                jar.outputs.files.getAsPath().tr('\\','/'),
                devJar.outputs.files.getAsPath().tr('\\','/'),
                sourceJar.outputs.files.getAsPath().tr('\\','/'),
                apiJar.outputs.files.getAsPath().tr('\\','/'),
        ]
    }
} else
    tasks.githubRelease.enabled = false